use gridiron::fp_256::Fp256;
use internal::fp::fp256_unsafe_from;
use internal::fp2elem::Fp2Elem;
use internal::homogeneouspoint::HomogeneousPoint;
use internal::homogeneouspoint::TwistedHPoint;
use num_traits::one;

/// Points that are used in our core algorithm for for `FP`.
///
/// `g1`            - the point which is in Fp2 and is used in the pairing.
/// `hash_element`  - another point in Fp2 that is used for hashing.
/// `generator`     - the generator point over FP.
#[derive(Debug)]
pub struct CurvePoints<FP> {
    pub generator: HomogeneousPoint<FP>,
    pub g1: TwistedHPoint<FP>,
    pub hash_element: TwistedHPoint<FP>,
}

lazy_static! {
    pub static ref FP_256_CURVE_POINTS: CurvePoints<Fp256> = CurvePoints {
        // Fixed point in cyclic group G1 (the trace zero subgroup).
        // Start with a point that is on the twisted curve y^2 = x^3 + (3 / (u + 3)).
        // Turns out u + 1 is a valid x, with y = sqrt(x^3 + (3 / (u + 3)).
        // Take (x,y) and multiply by (p + p - r) to get an r-torsion element of the twisted curve over FP2.
        // Compute the anti-trace map of that r-torsion element to get a point in the trace-zero subgroup.
        generator: HomogeneousPoint::new(one(), Fp256::from(2u8),),
        g1: TwistedHPoint {
            x: Fp2Elem {
                //"25743265030535080187440590897139396943782163562799308681850377411492232521347",
                elem1: fp256_unsafe_from("38ea2bf1e67ebb77fae32f89096b96cc8912bf8b02baccca22ccdd9bf6536683"),
                //34056889713323967780338301808336650802977437253339894663986165323395183925712
                elem2: fp256_unsafe_from("4b4b8437fabcdd026eeb59e9f6baf17bedb2d3cae8f4dc6baf3704498087d9d0")
            },
            y: Fp2Elem {
                //36332093629799712472233840570439767783123758424653318224159027848500552319214
                elem1: fp256_unsafe_from("50533c7b970d1b6e0374b55e8f96013a5ff8b25c7c51df6552093717d80ec0ee"),
                //19100300358747584658695151329066047798696640594509146799364306658205997167318
                elem2: fp256_unsafe_from("2a3a630bb4d90e84802b412c45886566c7a1297bd46b22dd19f949aeed7b72d6")
            },
            z: Fp2Elem {
                //11969434517458907073927619028753373626677015846219303340439317866996854601254
                elem1: fp256_unsafe_from("1a7675b952f7801f1895497dcc1f168d17f7214761909e23386d349ab952b626"),
                //14774454666095297364611775449425506027744765805321334870185419948913527571534
                elem2: fp256_unsafe_from("20aa0b8534909adae8a0142c3118302a42460c7232af903f0211927a97a3444e")
            }
        },

        // Used to hash integers to a point in FP2
        // Generated by multiplying g1 by the SHA256 hash of the date/time "Mon Feb 19 16:30:21 MST 2018\n",
        // encoded in ASCII/UTF-8, converted to a BigInt.
        hash_element: TwistedHPoint {
            x: Fp2Elem {
                //26115920809144023111516349163868890892335785984202627188956566235163006540541
                elem1: fp256_unsafe_from("39bd165cf62008931544afcc46e7c4067a9c36f3bf6da3f60824042670471afd"),
                //15905362109061908101726321997764649315090633150407344591241408991746779381256
                elem2: fp256_unsafe_from("232a1dada370347e57083bfc16fff22e7ff743d6ebae8eeba05ad501df5dfe08")
            },
            y: Fp2Elem {
                //4632230948348518150642153940906247958418069554996068756252789717528925762701
                elem1: fp256_unsafe_from("a3dbff3400c6b5d254d4a8737b0272726bef7612168750d945512ecab74f48d"),
                //3026141039160762752629025637420408604709576372807872293769066469244216243501
                elem2: fp256_unsafe_from("6b0bc318d9331d01ae6646f9b0d6cfe1c8b0e4eaee542fe03a8302f4a83752d")
            },
            z: Fp2Elem {
                //43872202626887887868122322275088633257981831137687656289783477940483447530228
                elem1: fp256_unsafe_from("60fec9664750a01047481318531471ab94ddf69c82b1cc92dea03735192722f4"),
                //20191379131685497308054970475671582162258136917730106438050079114233947942452
                elem2: fp256_unsafe_from("2ca3ea64a93d8451fb631c6923796388179f2ef65d72a05dd36af235146cee34")
            }
        }
    };
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn generator_times_2() {
        //37777967648492203239675772600961898148040325589588086812374811831221462604944
        let fp256 =
            fp256_unsafe_from("5385926b9f6135086d1912901e5a433ffcebc19a30fadbd0ee8cee26ba719c90");
        let result = FP_256_CURVE_POINTS.generator * fp256;
        let expected_result = HomogeneousPoint::new(
            //56377452267431283559088187378398270325210563762492926393848580098576649271541
            fp256_unsafe_from("7ca481d71abbae43395152eb7baa230d60543d43e2e8f89a18d182ecf8c3b8f5"),
            //46643694276241842996939080253335644316475473619096522181405937227991761798154
            fp256_unsafe_from("671f653900901fc3688542e5939ba6c064a7768f34fe45492a49e1f6d4d7c40a"),
        );
        assert_eq!(result, expected_result)
    }
}
